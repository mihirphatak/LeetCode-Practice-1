class Solution {
    public int romanToInt(String s) {
        int sum = 0;
        for(int i=0; i<s.length(); i++) {
            char num = s.charAt(i);
            if(num == 'I') {
                if((i + 1) < s.length() && s.charAt(i+1) == 'V') {
                    sum += 4;
                    i++;
                }
                else if((i + 1) < s.length() && s.charAt(i+1) == 'X') {
                    sum += 9;
                    i++;
                }
                else {
                    sum += 1;
                }
            }
            if(num == 'X') {
                if((i + 1) < s.length() && s.charAt(i+1) == 'L') {
                    sum += 40;
                    i++;
                }
                else if((i + 1) < s.length() && s.charAt(i+1) == 'C') {
                    sum += 90;
                    i++;
                }
                else {
                    sum += 10;
                }
            }
            if(num == 'C') {
                if((i + 1) < s.length() && s.charAt(i+1) == 'D') {
                    sum += 400;
                    i++;
                }
                else if((i + 1) < s.length() && s.charAt(i+1) == 'M') {
                    sum += 900;
                    i++;
                }
                else {
                    sum += 100;
                }
            }
            if(num == 'V' || num == 'L' || num == 'D' || num == 'M') {
                switch(num) {
                    case 'V':
                        sum += 5;
                        break;
                    case 'L':
                        sum += 50;
                        break;
                    case 'D':
                        sum += 500;
                        break;
                    case 'M':
                        sum += 1000;
                        break;
                    default:
                        sum += 0;
                }
            }
        }
        return sum;
    }
}

URL: https://leetcode.com/problems/roman-to-integer/description/
Notes: Check current character and next character if applicable. If applicable, increment by one more and ensure array out of bounds error validations.